"use strict";(self.webpackChunkexample=self.webpackChunkexample||[]).push([[365],{8850:function(n,a,e){e.r(a),e.d(a,{default:function(){return T}});var s=e(9916),t=e(3696);function p(n){const a=Object.assign({h1:"h1",a:"a",span:"span",img:"img",h2:"h2",p:"p",h3:"h3",ul:"ul",li:"li",h4:"h4",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",ol:"ol"},(0,s.RP)(),n.components);return t.createElement(t.Fragment,null,t.createElement(a.h1,{id:"advanced-regularization-techniques-for-neural-networks-"},t.createElement(a.a,{"aria-hidden":"true",tabIndex:"-1",href:"#advanced-regularization-techniques-for-neural-networks-"},t.createElement(a.span,{className:"icon icon-link"})),"Advanced Regularization Techniques for Neural Networks 🧠"),"\n",t.createElement(a.a,{href:"https://github.com/psf/black",target:"_blank",rel:"nofollow"},t.createElement(a.img,{src:"https://img.shields.io/badge/code%20style-black-000000.svg",alt:"Code style: black"})),"\n","\n","\n",t.createElement(a.a,{href:"https://www.python.org/downloads/",target:"_blank",rel:"nofollow"},t.createElement(a.img,{src:"https://img.shields.io/badge/python-3.8+-blue.svg",alt:"Python 3.8+"})),"\n","\n","\n",t.createElement(a.a,{href:"https://opensource.org/licenses/MIT",target:"_blank",rel:"nofollow"},t.createElement(a.img,{src:"https://img.shields.io/badge/License-MIT-yellow.svg",alt:"License: MIT"})),"\n",t.createElement(a.h2,{id:"introduction-"},t.createElement(a.a,{"aria-hidden":"true",tabIndex:"-1",href:"#introduction-"},t.createElement(a.span,{className:"icon icon-link"})),"Introduction 🎯"),"\n",t.createElement(a.p,null,"This research explores advanced regularization techniques for neural networks, specifically focusing on improving model generalization in image classification tasks. We investigate the effectiveness of Shake-Shake regularization, Mixup, and Cutout techniques when applied to Convolutional Neural Networks (CNNs) and ResNet architectures."),"\n",t.createElement(a.h2,{id:"project-overview-"},t.createElement(a.a,{"aria-hidden":"true",tabIndex:"-1",href:"#project-overview-"},t.createElement(a.span,{className:"icon icon-link"})),"Project Overview 📊"),"\n",t.createElement(a.p,null,"Our work addresses the persistent challenge of overfitting in deep learning models through the implementation and comparison of various regularization strategies. Using the CIFAR-10 dataset as our testing ground, we demonstrate significant improvements in model performance and generalization capabilities."),"\n",t.createElement(a.h3,{id:"key-features-"},t.createElement(a.a,{"aria-hidden":"true",tabIndex:"-1",href:"#key-features-"},t.createElement(a.span,{className:"icon icon-link"})),"Key Features 🌟"),"\n",t.createElement(a.ul,null,"\n",t.createElement(a.li,null,"Implementation of multiple regularization techniques"),"\n",t.createElement(a.li,null,"Comparative analysis across different model architectures"),"\n",t.createElement(a.li,null,"Comprehensive performance metrics and evaluation"),"\n",t.createElement(a.li,null,"Modular and extensible codebase"),"\n",t.createElement(a.li,null,"Detailed documentation and examples"),"\n"),"\n",t.createElement(a.h2,{id:"technical-implementation-"},t.createElement(a.a,{"aria-hidden":"true",tabIndex:"-1",href:"#technical-implementation-"},t.createElement(a.span,{className:"icon icon-link"})),"Technical Implementation 💻"),"\n",t.createElement(a.h3,{id:"basic-cnn-architecture"},t.createElement(a.a,{"aria-hidden":"true",tabIndex:"-1",href:"#basic-cnn-architecture"},t.createElement(a.span,{className:"icon icon-link"})),"Basic CNN Architecture"),"\n",t.createElement(a.p,null,"The foundational CNN model implements the following key components:"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">BasicCNN</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token comment"># Core convolution operation</span>\n        <span class="token comment"># F_ij = sum(sum(I[i+m][j+n] * K[m][n]))</span>\n        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>\n        self<span class="token punctuation">.</span>bn1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span>\n        self<span class="token punctuation">.</span>conv2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>\n        self<span class="token punctuation">.</span>bn2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span>\n        self<span class="token punctuation">.</span>fc <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">128</span> <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>\n        \n    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>bn1<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        x <span class="token operator">=</span> F<span class="token punctuation">.</span>max_pool2d<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>\n        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>bn2<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv2<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        x <span class="token operator">=</span> F<span class="token punctuation">.</span>max_pool2d<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>\n        x <span class="token operator">=</span> x<span class="token punctuation">.</span>view<span class="token punctuation">(</span>x<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>\n        <span class="token keyword">return</span> self<span class="token punctuation">.</span>fc<span class="token punctuation">(</span>x<span class="token punctuation">)</span></code></pre></div>'}}),"\n",t.createElement(a.h3,{id:"advanced-regularization-implementations"},t.createElement(a.a,{"aria-hidden":"true",tabIndex:"-1",href:"#advanced-regularization-implementations"},t.createElement(a.span,{className:"icon icon-link"})),"Advanced Regularization Implementations"),"\n",t.createElement(a.h4,{id:"cutout"},t.createElement(a.a,{"aria-hidden":"true",tabIndex:"-1",href:"#cutout"},t.createElement(a.span,{className:"icon icon-link"})),"Cutout"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">cutout</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> mask_size<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token triple-quoted-string string">"""Applies random cutout augmentation to the input image.\n    \n    Args:\n        image: Input tensor of shape (C, H, W)\n        mask_size: Size of the square mask\n    Returns:\n        Augmented image tensor\n    """</span>\n    h<span class="token punctuation">,</span> w <span class="token operator">=</span> image<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> image<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n    mask <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones_like<span class="token punctuation">(</span>image<span class="token punctuation">)</span>\n    x <span class="token operator">=</span> torch<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> w <span class="token operator">-</span> mask_size<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    y <span class="token operator">=</span> torch<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> h <span class="token operator">-</span> mask_size<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    mask<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span>y <span class="token operator">+</span> mask_size<span class="token punctuation">,</span> x<span class="token punctuation">:</span>x <span class="token operator">+</span> mask_size<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>\n    <span class="token keyword">return</span> image <span class="token operator">*</span> mask</code></pre></div>'}}),"\n",t.createElement(a.h4,{id:"mixup"},t.createElement(a.a,{"aria-hidden":"true",tabIndex:"-1",href:"#mixup"},t.createElement(a.span,{className:"icon icon-link"})),"Mixup"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">mixup_data</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token triple-quoted-string string">"""Performs mixup on the input data and labels.\n    \n    Args:\n        x: Input data tensor\n        y: Target labels\n        alpha: Mixup interpolation coefficient\n    Returns:\n        Mixed input, pair of targets, and lambda\n    """</span>\n    lam <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>beta<span class="token punctuation">(</span>alpha<span class="token punctuation">,</span> alpha<span class="token punctuation">)</span>\n    batch_size <span class="token operator">=</span> x<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n    index <span class="token operator">=</span> torch<span class="token punctuation">.</span>randperm<span class="token punctuation">(</span>batch_size<span class="token punctuation">)</span>\n    \n    mixed_x <span class="token operator">=</span> lam <span class="token operator">*</span> x <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> lam<span class="token punctuation">)</span> <span class="token operator">*</span> x<span class="token punctuation">[</span>index<span class="token punctuation">]</span>\n    y_a<span class="token punctuation">,</span> y_b <span class="token operator">=</span> y<span class="token punctuation">,</span> y<span class="token punctuation">[</span>index<span class="token punctuation">]</span>\n    <span class="token keyword">return</span> mixed_x<span class="token punctuation">,</span> y_a<span class="token punctuation">,</span> y_b<span class="token punctuation">,</span> lam</code></pre></div>'}}),"\n",t.createElement(a.h4,{id:"shake-shake-regularization"},t.createElement(a.a,{"aria-hidden":"true",tabIndex:"-1",href:"#shake-shake-regularization"},t.createElement(a.span,{className:"icon icon-link"})),"Shake-Shake Regularization"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ShakeShakeBlock</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token triple-quoted-string string">"""Implementation of Shake-Shake regularization block."""</span>\n    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">if</span> self<span class="token punctuation">.</span>training<span class="token punctuation">:</span>\n            alpha <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n            beta <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n        <span class="token keyword">else</span><span class="token punctuation">:</span>\n            alpha <span class="token operator">=</span> beta <span class="token operator">=</span> <span class="token number">0.5</span>\n            \n        y <span class="token operator">=</span> alpha <span class="token operator">*</span> self<span class="token punctuation">.</span>branch1<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> alpha<span class="token punctuation">)</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>branch2<span class="token punctuation">(</span>x<span class="token punctuation">)</span>\n        <span class="token keyword">return</span> x <span class="token operator">+</span> beta <span class="token operator">*</span> y</code></pre></div>'}}),"\n",t.createElement(a.h2,{id:"performance-results-"},t.createElement(a.a,{"aria-hidden":"true",tabIndex:"-1",href:"#performance-results-"},t.createElement(a.span,{className:"icon icon-link"})),"Performance Results 📈"),"\n",t.createElement(a.p,null,"Our experiments yielded the following results:"),"\n",t.createElement(a.table,null,t.createElement(a.thead,null,t.createElement(a.tr,null,t.createElement(a.th,null,"Model"),t.createElement(a.th,null,"Accuracy"),t.createElement(a.th,null,"Precision"),t.createElement(a.th,null,"Recall"),t.createElement(a.th,null,"F1 Score"))),t.createElement(a.tbody,null,t.createElement(a.tr,null,t.createElement(a.td,null,"ResNet50 (Base)"),t.createElement(a.td,null,"92%"),t.createElement(a.td,null,"91%"),t.createElement(a.td,null,"90%"),t.createElement(a.td,null,"90.5%")),t.createElement(a.tr,null,t.createElement(a.td,null,"+ Shake-Shake"),t.createElement(a.td,null,"93%"),t.createElement(a.td,null,"92%"),t.createElement(a.td,null,"91%"),t.createElement(a.td,null,"91.5%")),t.createElement(a.tr,null,t.createElement(a.td,null,"Basic CNN"),t.createElement(a.td,null,"78%"),t.createElement(a.td,null,"75%"),t.createElement(a.td,null,"77%"),t.createElement(a.td,null,"76%")),t.createElement(a.tr,null,t.createElement(a.td,null,"+ Advanced Regularization"),t.createElement(a.td,null,"88%"),t.createElement(a.td,null,"86%"),t.createElement(a.td,null,"87%"),t.createElement(a.td,null,"85.5%")))),"\n",t.createElement(a.h3,{id:"key-findings-"},t.createElement(a.a,{"aria-hidden":"true",tabIndex:"-1",href:"#key-findings-"},t.createElement(a.span,{className:"icon icon-link"})),"Key Findings 🔍"),"\n",t.createElement(a.ol,null,"\n",t.createElement(a.li,null,"Shake-Shake regularization provided consistent performance improvements across all metrics"),"\n",t.createElement(a.li,null,"Combined regularization techniques showed complementary benefits"),"\n",t.createElement(a.li,null,"Deeper architectures demonstrated superior learning capacity"),"\n",t.createElement(a.li,null,"Regularization significantly improved model generalization"),"\n"),"\n",t.createElement(a.h2,{id:"getting-started-"},t.createElement(a.a,{"aria-hidden":"true",tabIndex:"-1",href:"#getting-started-"},t.createElement(a.span,{className:"icon icon-link"})),"Getting Started 🚀"),"\n",t.createElement(a.h3,{id:"prerequisites"},t.createElement(a.a,{"aria-hidden":"true",tabIndex:"-1",href:"#prerequisites"},t.createElement(a.span,{className:"icon icon-link"})),"Prerequisites"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash">python <span class="token operator">>=</span> <span class="token number">3.8</span>\ntorch <span class="token operator">>=</span> <span class="token number">1.8</span>.0\ntorchvision <span class="token operator">>=</span> <span class="token number">0.9</span>.0\nnumpy <span class="token operator">>=</span> <span class="token number">1.19</span>.2</code></pre></div>'}}),"\n",t.createElement(a.h3,{id:"installation"},t.createElement(a.a,{"aria-hidden":"true",tabIndex:"-1",href:"#installation"},t.createElement(a.span,{className:"icon icon-link"})),"Installation"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/cawley/neural-regularization\n<span class="token builtin class-name">cd</span> neural-regularization\npip <span class="token function">install</span> <span class="token parameter variable">-r</span> requirements.txt</code></pre></div>'}}),"\n",t.createElement(a.h3,{id:"basic-usage"},t.createElement(a.a,{"aria-hidden":"true",tabIndex:"-1",href:"#basic-usage"},t.createElement(a.span,{className:"icon icon-link"})),"Basic Usage"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python"><span class="token keyword">from</span> models <span class="token keyword">import</span> ResNet50WithShakeShake\n<span class="token keyword">from</span> regularization <span class="token keyword">import</span> cutout<span class="token punctuation">,</span> mixup_data\n\n<span class="token comment"># Initialize model</span>\nmodel <span class="token operator">=</span> ResNet50WithShakeShake<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment"># Training with regularization</span>\n<span class="token keyword">for</span> inputs<span class="token punctuation">,</span> targets <span class="token keyword">in</span> train_loader<span class="token punctuation">:</span>\n    <span class="token comment"># Apply cutout</span>\n    inputs <span class="token operator">=</span> cutout<span class="token punctuation">(</span>inputs<span class="token punctuation">,</span> mask_size<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span>\n    \n    <span class="token comment"># Apply mixup</span>\n    inputs<span class="token punctuation">,</span> targets_a<span class="token punctuation">,</span> targets_b<span class="token punctuation">,</span> lam <span class="token operator">=</span> mixup_data<span class="token punctuation">(</span>inputs<span class="token punctuation">,</span> targets<span class="token punctuation">)</span>\n    \n    <span class="token comment"># Forward pass with shake-shake enabled</span>\n    outputs <span class="token operator">=</span> model<span class="token punctuation">(</span>inputs<span class="token punctuation">)</span></code></pre></div>'}}),"\n",t.createElement(a.h2,{id:"contributing-"},t.createElement(a.a,{"aria-hidden":"true",tabIndex:"-1",href:"#contributing-"},t.createElement(a.span,{className:"icon icon-link"})),"Contributing 🤝"),"\n",t.createElement(a.p,null,"We welcome contributions! Please read our ",t.createElement(a.a,{href:"CONTRIBUTING.md"},"Contributing Guidelines")," before submitting pull requests."),"\n",t.createElement(a.h2,{id:"license-"},t.createElement(a.a,{"aria-hidden":"true",tabIndex:"-1",href:"#license-"},t.createElement(a.span,{className:"icon icon-link"})),"License 📄"),"\n",t.createElement(a.p,null,"This project is licensed under the MIT License - see the ",t.createElement(a.a,{href:"LICENSE"},"LICENSE")," file for details."),"\n",t.createElement(a.h2,{id:"citation-"},t.createElement(a.a,{"aria-hidden":"true",tabIndex:"-1",href:"#citation-"},t.createElement(a.span,{className:"icon icon-link"})),"Citation 📚"),"\n",t.createElement(a.p,null,"If you use this code in your research, please cite:"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="bibtex"><pre class="language-bibtex"><code class="language-bibtex">@article{cawley2023regularization,\n  title={Comparative Analysis of Shake-Shake Regularization in ResNet-Like Architecture},\n  author={Cawley, Liam},\n  journal={arXiv preprint},\n  year={2023}\n}</code></pre></div>'}}),"\n",t.createElement(a.h2,{id:"contact-"},t.createElement(a.a,{"aria-hidden":"true",tabIndex:"-1",href:"#contact-"},t.createElement(a.span,{className:"icon icon-link"})),"Contact 📧"),"\n",t.createElement(a.p,null,"Liam Cawley - ",t.createElement(a.a,{href:"mailto:cawleyl@umich.edu"},"cawleyl@umich.edu")),"\n",t.createElement(a.p,null,"Project Link: ",t.createElement(a.a,{href:"https://github.com/cawley/neural-regularization",target:"_blank",rel:"nofollow"},"https://github.com/cawley/neural-regularization")))}var o=function(n){void 0===n&&(n={});const{wrapper:a}=Object.assign({},(0,s.RP)(),n.components);return a?t.createElement(a,n,t.createElement(p,n)):p(n)},l=e(8192),c=e(6324),r=e(2689),i=e.n(r),u=e(4279),k=e(7009),m=e(9743),d=e(4456),h=e(1656),g=e(9299),E=e(6596),b=e(7878),f=e(8687),y=e.n(f),x=e(6062),v=e.n(x),w=e(7091),_=e(1814),I=e(218),N=e(9258),z=e(9869),S=e(7908),A=e(9157);function C(n){let{data:{mdx:a},children:e}=n;const{fields:{slug:{html:s,nonce:p,htmlEncrypted:o,title:r,excerpt:f,path:x,date:C,commit:T,type:M}},frontmatter:{cover:L},tableOfContents:R}=a,q=i().unix(T).format("MMM Do YYYY"),F=S.A.formatDate(C),B=L?(0,c.c)(L):null,P=(0,z.Q6)(),j=S.A.generateFullUrl(P,x);console.log(p);const{0:H,1:O}=(0,t.useState)({locked:""!==p,failed:!1,html:s}),[U,W]=t.useState(!1),[D,G]=t.useState(""),Y=()=>{W(!U)},J=n=>{G(n)},K=()=>{if(H.locked)try{const n=v().decodeUTF8(D),a=v().decodeBase64(p),e=y().hash(n).slice(0,y().secretbox.keyLength),s=v().decodeBase64(o),t=y().secretbox.open(s,a,e),l=v().encodeUTF8(t);O({locked:!1,failed:!1,html:l})}catch(n){O({locked:!0,failed:!0,html:""})}},$=[];F&&$.push(`Posted: ${F}`),T>0&&F!==q&&$.push(`Edited: ${q}`);const Q=(0,t.useContext)(N.Ay),X=(0,l.useLocation)();(0,t.useEffect)((()=>{Q&&Q.setState&&Object.getOwnPropertyNames(R).length&&Q.setState({tableOfContents:R,pathname:X.pathname})}),[]);const V=()=>H.locked?t.createElement(u.A,{description:""},t.createElement(k.A,{fluid:!0},t.createElement(m.A,{justify:"center",type:"flex"},t.createElement(d.A,{xs:24,sm:24,md:24,lg:16,xl:12},H.failed?t.createElement(h.A,{type:"error"},"Wrong password! Please try again."):t.createElement(h.A,{type:"info"},"This article is encrypted by xsalsa20-poly1305 algorithm."),t.createElement(g.A,{style:{marginTop:"1rem"}},t.createElement(E.A,{type:U?"text":"password",value:D,placeholder:"Enter password to unlock this article.",onPressEnter:K,onChange:J,size:"lg"}),t.createElement(g.A.Button,{onClick:Y},U?t.createElement(A.A,{icon:"eye"}):t.createElement(A.A,{icon:"eye-slash"}))))))):t.createElement("article",{className:"markdown-body"},e),Z=()=>t.createElement("article",{className:"markdown-body"},e);return t.createElement(t.Fragment,null,t.createElement(I.A,{title:r,description:f,path:x,keywords:["FullStack developer","Javascript","ReactJS","NodeJS","Gatsby","technology"]}),t.createElement("div",null,t.createElement("div",{className:"marginTopTitle"},t.createElement("h1",{className:"titleSeparate"},r)),t.createElement("div",{style:{color:"var(--rs-text-tertiary)",marginBottom:"1rem"}},$.join(", ")),t.createElement(b.A,{style:{marginBottom:"1rem"}},t.createElement(b.A.Item,{as:d.A,xs:24,sm:24,md:B?12:24,lg:B?16:24},t.createElement(w.A,{title:"Abstract",style:{height:"100%"}},t.createElement("p",{style:{marginBottom:"0"},dangerouslySetInnerHTML:{__html:S.A.parseMarkDown(f,!0)}}))),B?t.createElement(b.A.Item,{as:d.A,xs:24,sm:24,md:12,lg:8},t.createElement("div",{style:{height:"100%"}},t.createElement(c.G,{image:B,title:r,alt:r}))):null),""===p?t.createElement(Z):t.createElement(V)),"posts"===M?t.createElement("div",{style:{marginTop:"2rem"}},t.createElement(_.A,{pageCanonicalUrl:j,pageId:r})):null)}function T(n){return t.createElement(C,n,t.createElement(o,n))}}}]);
//# sourceMappingURL=component---gatsby-theme-academic-src-templates-post-post-jsx-content-file-path-content-research-shake-shake-regularization-index-md-3eacaed1eef020be46fd.js.map